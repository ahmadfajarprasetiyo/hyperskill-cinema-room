type: edu
files:
  - name: src/cinema/Main.java
    visible: true
    text: |
      package cinema;
      
      import org.springframework.boot.SpringApplication;
      import org.springframework.boot.autoconfigure.SpringBootApplication;
      
      @SpringBootApplication
      public class Main {
          public static void main(String[] args) {
              SpringApplication.run(Main.class, args);
          }
      }
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    text: |-
      server.port=28852
      management.endpoints.web.exposure.include=*
      management.endpoint.shutdown.enabled=true
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      buildscript {
          repositories {
              mavenCentral()
          }
          dependencies {
              classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
              classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'org.springframework.boot'
      apply plugin: 'io.spring.dependency-management'
      
      repositories {
          mavenCentral()
      }
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation 'org.springframework.boot:spring-boot-starter'
          implementation 'org.springframework.boot:spring-boot-starter-actuator'
          implementation 'org.springframework.boot:spring-boot-starter-web'
      }
      
      test {
          jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
      }
    learner_created: false
  - name: test/CinemaTests.java
    visible: false
    text: |
      import com.google.gson.Gson;
      import com.google.gson.JsonObject;
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.dynamic.input.DynamicTesting;
      import org.hyperskill.hstest.exception.outcomes.PresentationError;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.mocks.web.response.HttpResponse;
      import org.hyperskill.hstest.stage.SpringTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.expect.json.builder.JsonArrayBuilder;
      import org.hyperskill.hstest.testing.expect.json.builder.JsonObjectBuilder;
      
      import java.util.Map;
      import java.util.UUID;
      
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;
      
      public class CinemaTests extends SpringTest {
      
          private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
          private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
          private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
          private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";
      
          private static final int totalRows = 9;
          private static final int totalCols = 9;
          private static final Gson gson = new Gson();
      
          private static String token = "";
      
          private static void checkStatusCode(HttpResponse resp, int status) {
              if (resp.getStatusCode() != status) {
                  throw new WrongAnswer(
                          resp.getRequest().getMethod() + " " +
                                  resp.getRequest().getLocalUri() +
                                  " should respond with status code " + status + ", " +
                                  "responded: " + resp.getStatusCode() + "\n\n" +
                                  "Response body:\n\n" + resp.getContent()
                  );
              }
          }
      
          CheckResult testEndpoint() {
              HttpResponse response = get("/seats").send();
              checkStatusCode(response, 200);
              return CheckResult.correct();
          }
      
          CheckResult testEndpointAvailableSeats() {
              HttpResponse response = get("/seats").send();
      
              JsonArrayBuilder arrayBuilder = isArray(totalRows * totalCols);
              for (int i = 1; i <= totalRows; i++) {
                  for (int j = 1; j <= totalCols; j++) {
                      int price = i < 5 ? 10 : 8;
                      JsonObjectBuilder objectBuilder = isObject()
                              .value("row", i)
                              .value("column", j)
                              .value("price", price);
                      arrayBuilder = arrayBuilder.item(objectBuilder);
                  }
              }
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("seats", arrayBuilder)
                              .value("columns", 9)
                              .value("rows", 9)
              );
      
              return CheckResult.correct();
          }
      
          CheckResult testPurchaseTicket() {
              HttpResponse response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", "1",
                              "column", "1"
                      ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson()
                      .check(
                              isObject()
                                      .value("token", isString())
                                      .value("ticket",
                                              isObject()
                                                      .value("row", 1)
                                                      .value("column", 1)
                                                      .value("price", 10)
                                      )
                      );
      
              JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
              token = object.get("token").getAsString();
      
              return CheckResult.correct();
          }
      
          CheckResult testErrorMessageThatTicketHasBeenPurchased() {
              HttpResponse response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", "1",
                              "column", "1"
                      ))
              ).send();
      
              checkStatusCode(response, 400);
      
              expect(response.getContent()).asJson()
                      .check(
                              isObject()
                                      .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                                      .anyOtherValues()
                      );
              return CheckResult.correct();
          }
      
          CheckResult testErrorMessageThatNumbersOutOfBounds() {
              HttpResponse response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", "10",
                              "column", "1"
                      ))
              ).send();
      
              checkStatusCode(response, 400);
      
              expect(response.getContent()).asJson()
                      .check(
                              isObject()
                                      .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                                      .anyOtherValues()
                      );
      
              response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", "1",
                              "column", "10"
                      ))
              ).send();
      
              checkStatusCode(response, 400);
      
              expect(response.getContent()).asJson()
                      .check(
                              isObject()
                                      .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                                      .anyOtherValues()
                      );
      
              response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", "-1",
                              "column", "-1"
                      ))
              ).send();
      
              checkStatusCode(response, 400);
      
              expect(response.getContent()).asJson()
                      .check(
                              isObject()
                                      .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                                      .anyOtherValues()
                      );
      
      
              return CheckResult.correct();
          }
      
          CheckResult testReturnTicket() {
      
              HttpResponse response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", 2,
                              "column", 5
                      ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson()
                      .check(
                              isObject()
                                      .value("token", isString())
                                      .value("ticket",
                                              isObject()
                                                      .value("row", 2)
                                                      .value("column", 5)
                                                      .value("price", 10)
                                      )
                      );
      
              JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);
      
              String tokenFromResponse = jsonResponse.get("token").getAsString();
              String wrongToken = UUID.randomUUID().toString();
      
              try {
                  response = post(
                          "/return",
                          gson.toJson(Map.of(
                                  "token", wrongToken
                          ))
                  ).send();
              } catch (PresentationError e) {
                  return CheckResult.wrong("An error occurred while trying to send POST /return with wrong token. " +
                          "In such scenario your program should respond with a 400 status code.");
              }
      
              checkStatusCode(response, 400);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                              .anyOtherValues()
              );
      
              response = post(
                      "/return",
                      gson.toJson(Map.of(
                              "token", tokenFromResponse
                      ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("ticket",
                                      isObject()
                                              .value("row", 2)
                                              .value("column", 5)
                                              .value("price", 10)
                              )
              );
      
              return CheckResult.correct();
          }
      
          CheckResult testStatsEndpoint() {
      
              HttpResponse response = get("/stats").addParams(Map.of()).send();
              checkStatusCode(response, 401);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("error", WRONG_PASSWORD_MESSAGE)
                              .anyOtherValues()
              );
      
      
              return CheckResult.correct();
          }
      
          CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
              Map<String, String> requestParams = Map.of("password", "super_secret");
              HttpResponse response = get("/stats").addParams(requestParams).send();
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("purchased", numberOfPurchasedTickets)
                              .value("income", currentIncome)
                              .value("available", availableSeats)
              );
      
              return CheckResult.correct();
          }
      
          CheckResult returnTicket() {
              HttpResponse response = post(
                      "/return",
                      gson.toJson(Map.of(
                              "token", token
                      ))
              ).send();
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("ticket",
                                      isObject()
                                              .value("row", 7)
                                              .value("column", 4)
                                              .value("price", 8)
                              )
              );
      
              return CheckResult.correct();
          }
      
          CheckResult testPurchaseAnotherTicket() {
              HttpResponse response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", "7",
                              "column", "4"
                      ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson()
                      .check(
                              isObject()
                                      .value("token", isString())
                                      .value("ticket",
                                              isObject()
                                                      .value("row", 7)
                                                      .value("column", 4)
                                                      .value("price", 8)
                                      )
                      );
      
              JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
              token = object.get("token").getAsString();
      
              return CheckResult.correct();
          }
      
          CheckResult testTokenInvalidation() {
      
              HttpResponse response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", 3,
                              "column", 6
                      ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("token", isString())
                              .value("ticket",
                                      isObject()
                                              .value("row", 3)
                                              .value("column", 6)
                                              .value("price", 10)
                              )
              );
      
              JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);
              String tokenFromResponse = jsonResponse.get("token").getAsString();
      
              response = post(
                      "/return",
                      gson.toJson(Map.of(
                              "token", tokenFromResponse
                      ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("ticket",
                                      isObject()
                                              .value("row", 3)
                                              .value("column", 6)
                                              .value("price", 10)
                              )
              );
      
              response = post(
                      "/return",
                      gson.toJson(Map.of(
                              "token", tokenFromResponse
                      ))
              ).send();
      
              checkStatusCode(response, 400);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                              .anyOtherValues()
              );
      
              return CheckResult.correct();
          }
      
          CheckResult testReturnedTicketAvailability() {
      
              HttpResponse response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", 3,
                              "column", 6
                      ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("token", isString())
                              .value("ticket",
                                      isObject()
                                              .value("row", 3)
                                              .value("column", 6)
                                              .value("price", 10)
                              )
              );
      
              JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);
              String tokenFromResponse = jsonResponse.get("token").getAsString();
      
              response = post(
                      "/return",
                      gson.toJson(Map.of(
                              "token", tokenFromResponse
                      ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("ticket",
                                      isObject()
                                              .value("row", 3)
                                              .value("column", 6)
                                              .value("price", 10)
                              )
              );
      
              response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", 3,
                              "column", 6
                      ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("token", isString())
                              .value("ticket",
                                      isObject()
                                              .value("row", 3)
                                              .value("column", 6)
                                              .value("price", 10)
                              )
              );
      
              return CheckResult.correct();
          }
      
          @DynamicTest
          DynamicTesting[] dynamicTests = new DynamicTesting[]{
                  this::testEndpoint,
                  this::testEndpointAvailableSeats,
                  this::testPurchaseTicket,
                  this::testErrorMessageThatTicketHasBeenPurchased,
                  this::testErrorMessageThatNumbersOutOfBounds,
                  this::testReturnTicket,
                  this::testStatsEndpoint,
                  () -> testStats(1, 10, 80),
                  this::testPurchaseAnotherTicket,
                  () -> testStats(2, 18, 79),
                  this::returnTicket,
                  () -> testStats(1, 10, 80),
                  this::testTokenInvalidation,
                  this::testReturnedTicketAvailability
          };
      }
    learner_created: false
  - name: src/cinema/Seat.java
    visible: true
    text: |
      package cinema;
      
      import com.fasterxml.jackson.annotation.*;
      
      public class Seat {
          int row;
          int column;
          int price;
          boolean purchased;
      
          Seat(int row, int column, int price) {
              this.row = row;
              this.column = column;
              this.price = price;
              this.purchased = false;
          }
      
          Seat() {}
      
          public int getRow() {
              return row;
          }
      
          public int getColumn() {
              return column;
          }
      
          public int getPrice() {
              return price;
          }
          @JsonIgnore
          public boolean isPurchased() {
              return purchased;
          }
      
          public void setColumn(int column) {
              this.column = column;
          }
      
          public void setRow(int row) {
              this.row = row;
          }
      
          public void purchased() {
              this.purchased = true;
          }
      
          public void returnPurchased() {
              this.purchased = false;
          }
      }
    learner_created: true
  - name: src/cinema/Token.java
    visible: true
    text: |
      package cinema;
      
      public class Token {
          private String token;
      
          Token() {}
      
          Token(String token) {
              this.token = token;
          }
      
          public void setToken(String token) {
              this.token = token;
          }
      
          public String getToken() {
              return token;
          }
      }
    learner_created: true
  - name: src/cinema/SeatController.java
    visible: true
    text: |
      package cinema;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.http.ResponseEntity;
      import org.springframework.web.bind.annotation.*;
      
      @RestController
      public class SeatController {
          final int sizeSeat = 9;
          SeatCinema seatCinema = new SeatCinema(sizeSeat, sizeSeat);
      
          @GetMapping("/seats")
          public SeatCinema getSeat() {
              return this.seatCinema;
          }
      
          @PostMapping("/purchase")
          public PurchaseResponse purchaseSeat(@RequestBody Seat seatRequest) {
              Seat seat = this.seatCinema.getSeat(String.format("%d-%d", seatRequest.getRow(), seatRequest.getColumn()));
      
              if (seat == null) {
                  throw new SeatPurchaseException("The number of a row or a column is out of bounds!");
              } else if (seat.isPurchased()) {
                  throw new SeatPurchaseException("The ticket has been already purchased!");
              }
      
              String uuid = this.seatCinema.purchaseSeat(seat);
              return new PurchaseResponse(uuid, seat);
          }
      
          @PostMapping("/return")
          public ReturnResponse returnSeat(@RequestBody Token tokenRequest) {
              Seat seat = this.seatCinema.returnSeat(tokenRequest.getToken());
      
              if (seat == null) {
                  throw new SeatPurchaseException("Wrong token!");
              }
      
              return new ReturnResponse(seat);
          }
      }
    learner_created: true
  - name: src/cinema/PurchaseResponse.java
    visible: true
    text: |
      package cinema;
      
      public class PurchaseResponse {
      
          private final String token;
          private final Seat ticket;
      
          PurchaseResponse(String token, Seat ticket) {
              this.token = token;
              this.ticket = ticket;
          }
      
          public Seat getTicket() {
              return ticket;
          }
      
          public String getToken() {
              return token;
          }
      }
    learner_created: true
  - name: src/cinema/ErrorResponse.java
    visible: true
    text: |
      package cinema;
      
      public class ErrorResponse {
          private final String error;
      
          ErrorResponse(String error) {
              this.error = error;
          }
          public String getError() {
              return error;
          }
      }
    learner_created: true
  - name: src/cinema/SeatPurchaseException.java
    visible: true
    text: |
      package cinema;
      
      public class SeatPurchaseException extends RuntimeException {
          SeatPurchaseException(String message) {
              super(message);
          }
      }
    learner_created: true
  - name: src/cinema/ReturnResponse.java
    visible: true
    text: |
      package cinema;
      
      public class ReturnResponse {
          private final Seat ticket;
      
          ReturnResponse(Seat ticket) {
              this.ticket = ticket;
          }
      
          public Seat getTicket() {
              return ticket;
          }
      }
    learner_created: true
  - name: src/cinema/ControllerExceptionHandler.java
    visible: true
    text: |
      package cinema;
      
      
      import org.springframework.http.HttpStatus;
      import org.springframework.http.ResponseEntity;
      import org.springframework.web.bind.annotation.*;
      
      @ControllerAdvice
      public class ControllerExceptionHandler {
      
          @ExceptionHandler(SeatPurchaseException.class)
          public ResponseEntity<ErrorResponse> handleSeatPurchaseException(SeatPurchaseException e) {
      
              ErrorResponse body = new ErrorResponse(e.getMessage());
      
              return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);
          }
      }
    learner_created: true
  - name: src/cinema/SeatCinema.java
    visible: true
    text: |
      package cinema;
      
      import com.fasterxml.jackson.annotation.JsonIgnore;
      
      import java.util.ArrayList;
      import java.util.List;
      import java.util.Map;
      import java.util.UUID;
      import java.util.concurrent.ConcurrentHashMap;
      
      public class SeatCinema {
          final private int rows;
          final private int columns;
          final private List<Seat> seats;
          final private Map<String, Seat> mapSeats;
          final private Map<String, Seat> purchasedSeats;
      
          SeatCinema(int rows, int columns) {
              this.rows = rows;
              this.columns = columns;
              this.mapSeats = new ConcurrentHashMap<>();
              this.purchasedSeats = new ConcurrentHashMap<>();
              this.seats = new ArrayList<>();
      
              for (int i = 1; i <= this.rows; i++) {
                  for (int j = 1; j <= this.columns; j++) {
                      int price = 8;
                      if (i <= 4) {
                          price = 10;
                      }
                      Seat seat = new Seat(i, j, price);
                      this.seats.add(seat);
                      this.mapSeats.put(String.format("%d-%d", i, j), seat);
                  }
              }
          }
      
          public int getColumns() {
              return columns;
          }
      
          public int getRows() {
              return rows;
          }
      
          public List<Seat> getSeats() {
              return seats;
          }
      
          public Seat getSeat(String key) {
              return this.mapSeats.get(key);
          }
      
          @JsonIgnore
          public String purchaseSeat(Seat seat) {
              String uuid = UUID.randomUUID().toString();
              seat.purchased();
              this.purchasedSeats.put(uuid, seat);
      
              return uuid;
          }
      
          @JsonIgnore
          public Seat returnSeat(String uuid) {
              Seat seat = this.purchasedSeats.get(uuid);
      
              if (seat != null) {
                  seat.returnPurchased();
                  this.purchasedSeats.remove(uuid);
              }
      
              return seat;
          }
      
      }
    learner_created: true
  - name: src/cinema/StatsResponse.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Wed, 14 Feb 2024 04:14:29 UTC"
record: -1
